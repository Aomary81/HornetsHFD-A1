package org.csc133.a1;

import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.system.Lifecycle;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Point;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;

import java.util.Random;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain extends Lifecycle {

    @Override
    public void runApp() {
        Game game = new Game();
        game.show();
    }

}

class Game extends Form implements Runnable{
    private GameWorld gw;

    public Game(){
        gw = new GameWorld();

        UITimer timer = new UITimer(this);
        timer.schedule(20, true, this);

        // Exit Key
        addKeyListener('Q', new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                gw.quit();
            }
        });
        //Left Arrow
        addKeyListener(-93, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                gw.quit();
            }
        });
        // Right Arrow
        addKeyListener(-94, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                gw.quit();
            }
        });
        // Up Arrow
        addKeyListener(-91, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                gw.quit();
            }
        });
        // Down Arrow
        addKeyListener(-92, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                gw.quit();
            }
        });
        // dump water
        addKeyListener('f', new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                gw.quit();
            }
        });
        // drink water
        addKeyListener('d', new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                gw.quit();
            }
        });
    }
    @Override
    public void run() {
        repaint();
    }
    public void paint(Graphics g){
        super.paint(g);
        gw.draw(g);
    }
}

class GameWorld{
    private Helipad helipad;
    private River river;
    private Fire fire;
    private Helicopter helicopter;

    public GameWorld(){
        init();
    }
    void init(){
        helipad = new Helipad();
        river = new River();
        fire = new Fire();
        helicopter = new Helicopter();
    }
    void draw(Graphics g){
        helipad.draw(g);
        river.draw(g);
        fire.draw(g);
        helicopter.draw(g);
    }

    public void quit() {
        Display.getInstance().exitApplication();
    }
}

class River {
    private Point location;
    private int top, bottom, start, end;

    public River(){
        location = new Point(Display.getInstance().getDisplayWidth()/2, Display.getInstance().getDisplayHeight() * 5/12);
        start = location.getX() - location.getX();
        end = location.getX() + location.getX();
        top = location.getY() * 4/5;
        bottom = location.getY() * 2/5;
    }
    void draw(Graphics g) {
        g.setColor(ColorUtil.BLUE);
        g.drawRect(start, top, end, bottom);
    }
}

class Helipad {
    private Point locationCenter;
    private int squareSize, circleSize, sqTopX, cirTopX, sqTopY, cirTopY;
    public Helipad(){
        squareSize = 200;
        circleSize = 150;
        locationCenter = new Point(Display.getInstance().getDisplayWidth()/2, Display.getInstance().getDisplayHeight() - squareSize - 10 );
        sqTopX = locationCenter.getX() - squareSize/2;
        sqTopY = locationCenter.getY() - squareSize/2;
        cirTopX = locationCenter.getX() - circleSize/2;
        cirTopY = locationCenter.getY() - circleSize/2;

    }
    void draw(Graphics g){
        g.setColor(ColorUtil.GRAY);
        g.drawArc(locationCenter.getX() - circleSize/2, locationCenter.getY() - circleSize/2, circleSize, circleSize, 0, 360);
        g.drawRect(locationCenter.getX() - squareSize/2, locationCenter.getY() - squareSize/2, squareSize, squareSize,5);

    }
}

class Fire {
    private Point location1, location2, location3;
    private int fireSize1, fireSize2, fireSize3;
    Random r;
    public Fire(){
        r = new Random();
        fireSize1 = 25 + r.nextInt(400);
        fireSize2 = 25 + r.nextInt(400);
        fireSize3 = 25 + r.nextInt(400);
        location1 = new Point(fireSize1 + r.nextInt(Display.getInstance().getDisplayWidth()/3 - fireSize1), fireSize1 + r.nextInt(Display.getInstance().getDisplayHeight()/3 - fireSize1));
        location2 = new Point(fireSize2 + Display.getInstance().getDisplayWidth()/2 + r.nextInt(Display.getInstance().getDisplayWidth()/2 - fireSize2), fireSize2 + r.nextInt(Display.getInstance().getDisplayHeight()/3 - fireSize2));
        location3 = new Point(fireSize3 + r.nextInt(Display.getInstance().getDisplayWidth()), fireSize3 + Display.getInstance().getDisplayHeight()/2 + r.nextInt(Display.getInstance().getDisplayHeight()/2 - (2 * fireSize3)));

    }

    void draw(Graphics g){
        g.setColor(ColorUtil.rgb(255, 0, 0));
        g.fillArc(location1.getX(), location1.getY(), fireSize1/2, fireSize1/2, 0, 360);
        g.fillArc(location2.getX(), location2.getY(), fireSize2/2, fireSize2/2, 0, 360);
        g.fillArc(location2.getX(), location3.getY(), fireSize3/2, fireSize3/2, 0, 360);
    }

}

class Helicopter {
    private Point location;
    private int heliSize, tailSize;
    public Helicopter(){
        heliSize = 50;
        tailSize = 100;
        location = new Point(Display.getInstance().getDisplayWidth()/2, Display.getInstance().getDisplayHeight() - 210);
    }

    void draw(Graphics g){
        g.setColor(ColorUtil.rgb(255, 255, 0));
        g.fillArc(location.getX() - heliSize/2, location.getY() - heliSize/2, heliSize, heliSize, 0, 360);
        g.setColor(ColorUtil.GREEN);
        g.drawRect(location.getX() , location.getY() + heliSize/2, 5, heliSize);
    }
}
